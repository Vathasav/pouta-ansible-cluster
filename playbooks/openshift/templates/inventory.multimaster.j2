# Ansible generated inventory. Will be overwritten by provision.yml

[OSEv3:vars]
ansible_ssh_user=cloud-user

# set openstack-ansible install type and version
containerized={{ oso_install_containerized | default(false) }}
deployment_type=origin
{% if oso_release is defined %}
openshift_release={{ oso_release }}
{% endif %}
{% if oso_image_tag is defined %}
openshift_image_tag={{ oso_image_tag }}
{% endif %}

# move the internal DNS away from port 53, where we have dnsmasq for cluster DNS
openshift_master_dns_port=8053

# project network isolation by default
os_sdn_network_plugin_name='redhat/openshift-ovs-multitenant'

{% if oso_secure_registry|default(False) %}
# set the flag telling registry in secured (helps with scaling, has to be done manually)
openshift_docker_hosted_registry_insecure=False
{% endif %}

# clustered installation
openshift_master_cluster_method=native
{% if (lb.num_vms|default(0)) > 0 %}
openshift_master_cluster_hostname={{ groups['lb'][0] }}
{% else %}
openshift_master_cluster_hostname={{ groups['master'][0] }}
{% endif %}
openshift_master_cluster_public_hostname={{ openshift_public_hostname }}

# use openshift's own dnsmasq
openshift_use_dnsmasq=false

# set authentication to htpasswd and provide a htpasswd file
openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]

{% if openshift_master_htpasswd_file is defined %}
openshift_master_htpasswd_file={{ openshift_master_htpasswd_file }}
{% endif %}

# as a guess, set the default subdomain to openshift_public_hostname
osm_default_subdomain={{ openshift_public_hostname }}

# default project node selector
osm_default_node_selector='region=user-node'
osm_project_request_template='default/project-request-default'

# deploy the router on a node with external IP
openshift_hosted_router_selector='region=network'

# if the wildcard cert is defined, set it for api and router
# note the difference with singular and plural
{% if certificate_crt is defined %}
openshift_master_named_certificates=[{'certfile': '{{ certificate_crt }}', 'keyfile': '{{ certificate_key }}', 'cafile': '{{ certificate_ca }}', 'names': ['{{ openshift_public_hostname }}'] }]
openshift_master_overwrite_named_certificates=true
openshift_hosted_router_certificate={'certfile': '{{ certificate_crt }}', 'keyfile': '{{ certificate_key }}', 'cafile': '{{ certificate_ca }}' }
{% endif %}

openshift_hosted_metrics_deploy=true
openshift_master_default_subdomain={{ openshift_public_hostname }}
openshift_hosted_metrics_resolution=20s

# reduce master memory usage
osm_api_server_args={'deserialization-cache-size': ['1000']}

[OSEv3:children]
masters
nodes
etcd
lb

[masters:vars]
vm_group_name=master
pv_vg_data=vg_data

[masters]
{% for master in groups['master'] %}
{{ master }} ansible_ssh_host={{ hostvars[master]['ansible_ssh_host'] }}
{% endfor %}

# we compose [nodes] from (potentially heterogeneous) child groups
[nodes]

[nodes:children]
node_masters
node_lbs
{% for group_name in vars['node_groups'] %}
{{ group_name }}
{% endfor %}

[node_masters:vars]
openshift_schedulable=true

[node_masters]
{% for vm in groups['master'] %}
{{ vm }} ansible_ssh_host={{ hostvars[vm]['ansible_ssh_host'] }} openshift_node_labels="{'region': 'infra'}"
{% endfor %}

[node_lbs:vars]
vm_group_name=lb
openshift_node_labels="{'region': 'network'}"
pv_vg_data=vg_data

[node_lbs]
{% if (lb is defined and lb.num_vms|default(0)) > 0 %}
{% for vm in groups['lb'] %}
{{ vm }} ansible_ssh_host={{ hostvars[vm]['ansible_ssh_host'] }}
{% endfor %}
{% endif %}

{% for group_name in vars['node_groups'] %}
[{{ group_name }}:vars]
openshift_node_labels="{'region': 'user-node', 'type': '{{ group_name }}'}"
pv_vg_data=vg_data
vm_group_name={{ group_name }}

[{{ group_name }}]
{% for vm in groups[group_name] %}
{{ vm }} ansible_ssh_host={{ hostvars[vm]['ansible_ssh_host'] }}
{% endfor %}
{% endfor %}

[nfsservers:vars]
vm_group_name=nfs
pv_vg_pvol=vg_pvol

[nfsservers]
{{ groups['nfs'][0] }} ansible_ssh_host={{ hostvars[groups['nfs'][0]]['ansible_ssh_host'] }}

[etcd]
{% if (etcd.num_vms|default(0)) > 0 %}{% set etcd_group='etcd' %}{% else %}{% set etcd_group='master' %}{% endif %}
{% for vm in groups[etcd_group] %}
{{ vm }} ansible_ssh_host={{ hostvars[vm]['ansible_ssh_host'] }}
{% endfor %}

[lb]
{% if (lb.num_vms|default(0)) > 0 %}
{% for vm in groups['lb'] %}
{{ vm }} ansible_ssh_host={{ hostvars[vm]['ansible_ssh_host'] }} containerized=false
{% endfor %}
{% endif %}
